/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IJurisdictionInterface extends utils.Interface {
  contractName: "IJurisdiction";
  functions: {
    "join()": FunctionFragment;
    "leave()": FunctionFragment;
    "roleAssign(address,string)": FunctionFragment;
    "roleRemove(address,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roleAssign",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemove",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAssign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleRemove", data: BytesLike): Result;

  events: {
    "CaseCreated(uint256,address)": EventFragment;
    "RoleCreated(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CaseCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
}

export type CaseCreatedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; contractAddress: string }
>;

export type CaseCreatedEventFilter = TypedEventFilter<CaseCreatedEvent>;

export type RoleCreatedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; role: string }
>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export interface IJurisdiction extends BaseContract {
  contractName: "IJurisdiction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJurisdictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    join(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleAssign(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleRemove(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  join(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  leave(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleAssign(
    account: string,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleRemove(
    account: string,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    join(overrides?: CallOverrides): Promise<void>;

    leave(overrides?: CallOverrides): Promise<void>;

    roleAssign(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleRemove(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CaseCreated(uint256,address)"(
      id?: BigNumberish | null,
      contractAddress?: null
    ): CaseCreatedEventFilter;
    CaseCreated(
      id?: BigNumberish | null,
      contractAddress?: null
    ): CaseCreatedEventFilter;

    "RoleCreated(uint256,string)"(
      id?: BigNumberish | null,
      role?: null
    ): RoleCreatedEventFilter;
    RoleCreated(id?: BigNumberish | null, role?: null): RoleCreatedEventFilter;
  };

  estimateGas: {
    join(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleAssign(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleRemove(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    join(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleAssign(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleRemove(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
